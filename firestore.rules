rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ───────── 공통 헬퍼 함수 ───────── */
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && (
        request.auth.token.admin == true ||
        request.auth.token.email == 'audionyx369@gmail.com'
      );
    }
    
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    
    // 이메일 인증 요구사항 완화 - 로그인만 확인
    function hasValidAuth() {
      return isSignedIn();
    }

    /* ───────── ① channels 컬렉션 ─────────
       유저별 채널 정보 (문서 ID = 사용자 UID) */
    match /channels/{userId} {
      // 모든 사람이 채널 목록 읽기 가능 (공개)
      allow read: if true;
      
      // 채널 문서 생성/수정: 로그인된 사용자 본인만, 유저 정보 포함
      allow create, update: if isSignedIn() 
                           && request.auth.uid == userId
                           && hasValidUserChannelData();
      
      // 관리자 업데이트: 변경된 키가 channels/updatedAt 뿐인지 검사, userInfo는 불변, 배열 길이 불변
      allow update: if isAdmin()
                    && request.resource.data.diff(resource.data).changedKeys().hasOnly(['channels','updatedAt'])
                    && request.resource.data.userInfo == resource.data.userInfo
                    && request.resource.data.channels.size() == resource.data.channels.size();
      
      // 채널 문서 삭제: 관리자 또는 문서 소유자만
      allow delete: if isAdmin() || isOwner(userId);
    }
    
    // 유저 채널 데이터 검증 함수
    function hasValidUserChannelData() {
      let data = request.resource.data;
      return data.keys().hasAll(['userInfo', 'channels', 'updatedAt'])
             && hasValidUserInfo(data.userInfo)
             && data.channels is list
             && data.updatedAt is timestamp
             && isValidChannelsList(data.channels);
    }
    
    // 유저 정보 검증 함수
    function hasValidUserInfo(userInfo) {
      return userInfo.keys().hasAll(['uid', 'email'])
             && userInfo.uid is string && userInfo.uid.size() > 0
             && userInfo.email is string && userInfo.email.size() > 0;
    }
    
    // 채널 리스트 검증 함수
    function isValidChannelsList(channels) {
      return channels.size() <= 10;  // 최대 10개 채널 제한
      // 각 채널 개별 검증은 클라이언트 측에서 수행
    }

    /* ───────── ② contentLinks 컬렉션 ─────────
       사용자별 컨텐츠 링크 (문서 ID = 사용자 UID) */
    match /contentLinks/{userId} {
      // 읽기: 관리자 또는 본인만
      allow read: if isAdmin() || isOwner(userId);
      // 컬렉션 리스트 조회: 관리자만
      allow list: if isAdmin();
      
      // 생성/수정: 로그인된 사용자 본인만, 유저 정보 포함
      allow create, update: if isSignedIn() 
                           && request.auth.uid == userId
                           && hasValidUserContentLinksData();
      
      // 삭제: 관리자 또는 문서 소유자만
      allow delete: if isAdmin() || isOwner(userId);
    }
    
    // 기존 개별 contentLinks 문서 (마이그레이션용 - 읽기 전용)
    match /contentLinks/{linkId} {
      // 마이그레이션을 위한 기존 개별 문서 읽기만 허용
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      // 새로운 개별 문서 생성은 차단 (새 구조 사용 강제)
      allow write: if false;
    }
    
    // 유저 컨텐츠 링크 데이터 검증 함수
    function hasValidUserContentLinksData() {
      let data = request.resource.data;
      return data.keys().hasAll(['userInfo', 'contentLinks', 'updatedAt'])
             && hasValidUserInfo(data.userInfo)
             && data.contentLinks is list
             && data.updatedAt is timestamp
             && isValidContentLinksList(data.contentLinks);
    }
    
    // 컨텐츠 링크 리스트 검증 함수
    function isValidContentLinksList(contentLinks) {
      return contentLinks.size() <= 50;  // 최대 50개 컨텐츠 링크 제한
      // 각 컨텐츠 링크 개별 검증은 클라이언트 측에서 수행
    }

    /* ───────── ③ track_requests 컬렉션 ─────────
       음원 요청 */
    match /track_requests/{requestId} {
      // 생성: 로그인 + uid 필드가 본인 UID와 일치
      allow create: if isSignedIn() 
                    && request.resource.data.uid == request.auth.uid
                    && hasValidTrackRequestData();

      // 읽기: 관리자 또는 본인 요청만
      allow read: if isAdmin() || isOwner(resource.data.uid);
      
      // 수정: 관리자만 (상태 변경용)
      allow update: if isAdmin();
      
      // 삭제: 관리자 또는 본인만
      allow delete: if isAdmin() || isOwner(resource.data.uid);
    }
    
    // 음원 요청 데이터 검증 함수
    function hasValidTrackRequestData() {
      let data = request.resource.data;
      return data.keys().hasAll(['uid', 'status', 'createdAt'])
             && data.uid is string && data.uid.size() > 0
             && data.status is string
             && data.createdAt is timestamp;
    }

    /* ───────── ④ user_withdraw_accounts 컬렉션 ─────────
       사용자 정산 계좌 */
    match /user_withdraw_accounts/{userId} {
      // 읽기: 관리자 또는 본인만 (데이터 검증 불필요)
      allow read: if isAdmin() || isOwner(userId);
      // 컬렉션 리스트 조회: 관리자만
      allow list: if isAdmin();
      
      // 쓰기: 본인 + 데이터 검증
      allow write: if isOwner(userId) && hasValidWithdrawAccountData();
    }
    
    // 계좌 정보 검증 함수
    function hasValidWithdrawAccountData() {
      let data = request.resource.data;
      return data.keys().hasAll(['uid', 'updatedAt'])
             && data.uid is string && data.uid.size() > 0
             && data.updatedAt is timestamp
             // 한국 또는 일본 계좌 정보 중 하나는 반드시 있어야 함
             && (hasKoreanAccountData(data) || hasJapaneseAccountData(data));
    }
    
    // 한국 계좌 정보 검증
    function hasKoreanAccountData(data) {
      return data.get('language', '') == 'ko'
             && data.keys().hasAll(['bank', 'account', 'holder'])
             && data.bank is string && data.bank.size() > 0
             && data.account is string && data.account.size() > 0
             && data.holder is string && data.holder.size() > 0;
    }
    
    // 일본 계좌 정보 검증
    function hasJapaneseAccountData(data) {
      return data.get('language', '') == 'jp'
             && data.keys().hasAll(['bankCode', 'branchCode', 'accountType', 'accountNumber', 'accountHolderKana'])
             && data.bankCode is string && data.bankCode.matches('^[0-9]{4}$')
             && data.branchCode is string && data.branchCode.matches('^[0-9]{3}$')
             && data.accountType is string && data.accountType in ['普通', '当座', '貯蓄']
             && data.accountNumber is string && data.accountNumber.matches('^[0-9]{7}$')
             && data.accountHolderKana is string && data.accountHolderKana.size() > 0;
    }

    /* ───────── ⑤ track 컬렉션 ─────────
       공개 음원 메타데이터 (기존 컬렉션) */
    match /track/{trackId} {
      // 모든 사람이 트랙 메타데이터 읽기 가능
      allow read: if true;
      allow list: if true;
      
      // 트랙 생성/수정: 관리자만
      allow write: if isAdmin();
    }

    /* ───────── ⑥ track_new 컬렉션 ─────────
       새로운 음원 메타데이터 컬렉션 */
    match /track_new/{trackId} {
      // 모든 사람이 트랙 메타데이터 읽기 가능
      allow read: if true;
      allow list: if true;
      
      // 트랙 생성/수정: 관리자만
      allow write: if isAdmin();
    }

    /* ───────── ⑦ users 컬렉션 ─────────
       사용자 공개 프로필 */
    match /users/{userId} {
      // 모든 사람이 사용자 프로필 읽기 가능
      allow read: if true;
      
      // 프로필 생성/수정: 본인만 (이메일 인증 요구사항 제거)
      allow create: if isOwner(userId) && hasValidUserData();
      allow update: if isOwner(userId);
      
      // 프로필 삭제: 관리자 또는 본인만
      allow delete: if isAdmin() || isOwner(userId);
    }
    
    // 사용자 데이터 검증 함수 - 실제 저장 데이터에 맞게 수정
    function hasValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['uid', 'email', 'createdAt'])
             && data.uid is string && data.uid.size() > 0
             && data.email is string && data.email.size() > 0
             && data.createdAt is timestamp
             // 선택적 필드들 검증
             && (data.get('displayName', '') is string)
             && (data.get('nickname', '') is string)
             && (data.get('phone', '') is string)
             && (data.get('username', '') is string)
             && (data.get('provider', '') is string);
    }

    /* ───────── ⑧ 메일 관련 컬렉션들 ───────── */
    match /mail_queue/{mailId} {
      // 관리자만 메일 큐 관리
      allow read, write: if isAdmin();
    }
    
    match /mail_logs/{logId} {
      // 관리자만 메일 로그 조회
      allow read, write: if isAdmin();
    }
    
    match /email_templates/{templateId} {
      // 템플릿 읽기: 모든 사람 (클라이언트에서 미리보기용)
      allow read: if true;
      // 템플릿 관리: 관리자만
      allow write: if isAdmin();
    }

    /* ───────── ⑨ 이벤트 관련 컬렉션들 ───────── */
    match /events/{eventId} {
      // 이벤트 읽기: 모든 사람
      allow read: if true;
      // 이벤트 관리: 관리자만
      allow write: if isAdmin();
    }
    
    match /event_participants/{participantId} {
      // 본인 참여 정보만 읽기/쓰기
      allow read, write: if isSignedIn() && isOwner(resource.data.userId);
      // 관리자는 모든 참여 정보 조회 가능
      allow read: if isAdmin();
    }

    /* ───────── ⑩ 알림 관련 컬렉션들 ───────── */
    match /notifications/{userId} {
      // 본인 알림만 읽기/수정
      allow read, update: if isOwner(userId);
      // 알림 생성: 시스템 또는 관리자만
      allow create: if isAdmin();
      // 알림 삭제: 본인 또는 관리자
      allow delete: if isAdmin() || isOwner(userId);
    }

    /* ───────── ⑪ 피드백/리뷰 관련 컬렉션들 ───────── */
    match /feedback/{feedbackId} {
      // 피드백 생성: 로그인된 사용자
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // 피드백 읽기: 관리자만
      allow read: if isAdmin();
      // 피드백 수정/삭제: 관리자만
      allow update, delete: if isAdmin();
    }
    
    match /reviews/{reviewId} {
      // 리뷰 읽기: 모든 사람 (공개)
      allow read: if true;
      // 리뷰 생성: 로그인된 사용자
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // 리뷰 수정: 본인 또는 관리자
      allow update: if isAdmin() || isOwner(resource.data.userId);
      // 리뷰 삭제: 관리자만
      allow delete: if isAdmin();
    }

    /* ───────── ⑫ FAQ 관련 컬렉션들 ───────── */
    match /faqs/{faqId} {
      // FAQ 읽기: 모든 사람
      allow read: if true;
      // FAQ 관리: 관리자만
      allow write: if isAdmin();
    }
    
    match /faq_categories/{categoryId} {
      // 카테고리 읽기: 모든 사람
      allow read: if true;
      // 카테고리 관리: 관리자만
      allow write: if isAdmin();
    }

    /* ───────── ⑬ 파일 업로드 메타데이터 ───────── */
    match /file_metadata/{fileId} {
      // 파일 메타데이터 읽기: 파일 소유자 또는 관리자
      allow read: if isAdmin() || isOwner(resource.data.userId);
      // 파일 메타데이터 생성: 로그인된 사용자 (본인 파일만)
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // 파일 메타데이터 수정/삭제: 파일 소유자 또는 관리자
      allow update, delete: if isAdmin() || isOwner(resource.data.userId);
    }

    /* ───────── ⑭ 회사/브랜드 정보 ───────── */
    match /company_info/{infoId} {
      // 회사 정보 읽기: 모든 사람
      allow read: if true;
      // 회사 정보 관리: 관리자만
      allow write: if isAdmin();
    }
    
    match /brand_assets/{assetId} {
      // 브랜드 자산 읽기: 모든 사람
      allow read: if true;
      // 브랜드 자산 관리: 관리자만
      allow write: if isAdmin();
    }

    /* ───────── ⑮ 통계/분석 관련 컬렉션들 ───────── */
    match /user_analytics/{userId} {
      // 본인 분석 데이터만 읽기
      allow read: if isOwner(userId);
      // 분석 데이터 생성/수정: 시스템 또는 관리자만
      allow write: if isAdmin();
    }
    
    match /track_analytics/{trackId} {
      // 트랙 분석 데이터 읽기: 모든 사람 (공개 통계)
      allow read: if true;
      // 트랙 분석 데이터 쓰기: 관리자만
      allow write: if isAdmin();
    }
    
    match /platform_analytics/{date} {
      // 플랫폼 분석 데이터: 관리자만
      allow read, write: if isAdmin();
    }

    /* ───────── ⑯ 세션/임시 데이터 ───────── */
    match /sessions/{sessionId} {
      // 세션 데이터: 본인만
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    match /temp_data/{tempId} {
      // 임시 데이터: 본인만 (일정 시간 후 자동 삭제)
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /* ───────── ⑰ 정산 관련 추가 컬렉션들 ───────── */
    match /user_earnings/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // 수익 데이터 생성/수정: 시스템 또는 관리자만 (클라이언트에서 직접 쓰기 방지)
      allow write: if isAdmin();
    }

    match /revenue_reports/{userId} {
      // 수익 보고서: 본인만 읽기
      allow read: if isOwner(userId);
      // 수익 보고서 생성/수정: 시스템 또는 관리자만
      allow write: if isAdmin();
    }
    
    match /payment_history/{paymentId} {
      // 결제 내역: 해당 사용자만 읽기
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      // 결제 내역 생성/수정: 시스템 또는 관리자만
      allow write: if isAdmin();
    }


    /* ───────── ⑲ CD Baby 업로드 기록 컬렉션 ───────── */
    match /cdbaby_upload_history/{historyId} {
      allow read, write: if isAdmin();
    }

    /* ───────── ⑱ 관리자 전용 컬렉션들 ───────── */
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    match /system_logs/{document=**} {
      allow read, write: if isAdmin();
    }
    
    match /audit_logs/{document=**} {
      allow read, write: if isAdmin();
    }

    /* ───────── ⑲ 기타 모든 경로 차단 ───────── */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
